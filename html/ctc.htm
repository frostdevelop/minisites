<!DOCTYPE html>
<html>
<head>
  <title>Columnar Transposition Cipher</title>
  <style>
    body {
      padding: 2vh 5vw;
      color: #EEE;
      font-size: 20px;
      font-family: Roboto, Arial, sans-serif;
      text-shadow: 0 5px 20px rgba(0,0,0,0.8);
      background: #222;
      scroll-behavior:smooth;
    }
    
    textarea {
       height: 60vh;
       width: 80vw;
       box-shadow: none;
       border-radius: 0;
       resize: none;
       border:none;
       padding: 5px;
    }
    .flexhor {
    	display: flex;
    }
    .vd {
    	padding: 0;
    	margin: 0;
    	border-color: white;
    	border-style: dashed;
    }

    ::-webkit-scrollbar {width: 10px;}
    ::-webkit-scrollbar-track {
      background: #111;
    }
    ::-webkit-scrollbar-thumb {
      background: #666;
      border-radius: 10px;
    }
    ::-webkit-scrollbar-thumb:hover {background:#777;}
    ::-webkit-scrollbar-thumb:active {box-shadow: 0 0 10px white;}
    
    /*begin pacifikyneodark*/
    :root {
      --hover: #4f4f4f;
      --border: 2px;
      --radius: 45px;
      --height: 6px;
    }
    input:focus,select:focus,textarea:focus {outline:none;}
    input:active,select:active,input[type="text"]:focus,.button:active {background-image: linear-gradient(to left top, #292929, #121212)};
    .button,input,select {font-family: Tahoma, Arial, sans-serif;}
    input:active,select:active,input[type="text"]:focus,.button:active {
      box-shadow: 2px 2px var(--height) rgba(0,0,0,0.7) inset, -2px -2px var(--height) rgba(240,240,240,0.3) inset;
      border-color: rgba(0,0,0,0);
    }
    details,input,select,.button,.contsolid {border: var(--border) #292929 solid;box-shadow: 2px 2px var(--height) rgba(0,0,0,0.7), -2px -2px var(--height) rgba(240,240,240,0.3);}
    input,select {
      transition: box-shadow 500ms ease, border 500ms ease;
      background-image: linear-gradient(to left top, #121212, #292929);
      color: currentcolor;
      font-size: 13px;
      padding: 10px;
      margin: 5px 0;
      border-radius: var(--radius);
      min-width:0px;
    }
    select {background-color:#222}
    input:hover,select:hover,.button:hover {border-color: var(--hover);}
    .smallinput {width:10em}
    .button {
      display: inline-flex;
      flex-direction: row;
      justify-content: center;
      align-content: center;
      align-items: center;
      cursor: pointer;
      background-image: linear-gradient(to left top, #121212, #292929);
      color: currentColor;
      transition: box-shadow 500ms ease, border 500ms ease;
      font-size: 13px;
      padding: 8px;
      margin: 4px;
      border-radius: var(--radius);
      min-width: 100px;
    }
    .iconbutton {
      min-width: 0;
      width: 45px;
      height: 45px;
      font-size: 30px;
      border-radius: 50%;
      font-weight: bold;
      text-shadow: 0 0 5px rgba(0,0,0,0.5);
    }
    .icon {
      display: inline;
      height: 25px;
      width: 25px;
    }
    .smallbutton {min-width:5em;}
    details {
      border-radius: 20px;
      padding: 10px;
      margin: 10px;
      /*background-image: linear-gradient(to left top, #121212, #292929);*/
    }
    details[open] > summary {
      border-bottom: rgba(255,255,255,0.2) solid 2px;
      margin-bottom: 10px;
    }
    .gbtn {
      background-image: linear-gradient(135deg,#33ff33,#11c011);
      box-shadow: 2px 2px var(--height) rgba(0,0,0,0.8),-2px -2px var(--height) #33ff33;
      border-color:#11c011;
    }
    .gbtn:hover {border-color:#33ff33;}
    .gbtn:active {background: linear-gradient(-45deg,#33ff33,#11c011);box-shadow: inset 2px 2px var(--height) rgba(0,0,0,0.8),inset -2px -2px var(--height) #33ff33;}
    .rbtn {
      background-image: linear-gradient(135deg,#f95353,#a51212);
      box-shadow: 2px 2px var(--height) rgba(0,0,0,0.8),-2px -2px var(--height) #f95353;
      border-color: #a51212;
    }
    .rbtn:hover {border-color: #f95353}
    .rbtn:active {background-image: linear-gradient(-45deg,#f95353,#a51212);box-shadow: inset 2px 2px var(--height) rgba(0,0,0,0.8), inset -2px -2px var(--height) #f95353;}
    .disabled {
      background: #ffcb85 !important;
      color: #595959 !important;
      box-shadow: none !important;
    }
    .indent {
      margin: 5px 10px;
    }
    h2 {
      font-size: 17px;
      font-weight: 600;
    }
    
    h3 {
      color: #bfbfbf;
      font-weight: 500;
      font-size: 12px;
      margin: 2px;
    }
    
    #content {
      display: flex;
      flex-direction: column;
      flex-wrap: wrap;
      align-items: center;
    }
    
    .iconbutton {
      width: 45px;
      height: 45px;
    }
    
    .icon {
      display: inline;
      height: 25px;
      width: 25px;
    }
    
    .buttonicon {
      width: 20px;
      height: 20px;
    }
    
    label.iconbutton {
      height: 25px !important;
      width: 25px !important;
    }
    
    label {
      font-weight: 600;
      font-size: 12px;
    }
    
    .center-container-row {
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: center;
    }
    
    .contanter-padding {
      margin: 5px;
      align-items: left;
    }
    
    footer {
      margin: 10px;
      font-size: 10px;
    }
    
    .switch {
      position: relative;
      display: inline-block;
      width: 45px;
      height: 25px;
      margin: 0px 3px 0px 0px;
    }
    
    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(to left top, #8c8c8c, #b0b0b0);
      box-shadow: 2px 2px var(--height) rgba(0,0,0,0.7), -2px -2px var(--height) rgba(240,240,240,0.3), #6a6a6a 0px 1px inset;
      -webkit-transition: .4s;
      transition: .4s;
    }
    
    .slider:before {
      position: absolute;
      content: "";
      height: 20px;
      width: 20px;
      left: 3px;
      bottom: 3px;
      background: linear-gradient(to left top, #babababa, #d1d1d1);
      box-shadow: 2px 2px var(--height) rgba(0,0,0,0.7), -2px -2px var(--height) rgba(240,240,240,0.3);
      -webkit-transition: .4s;
      transition: .4s;
    }
    
    .switch input:checked + .slider {
      background: linear-gradient(to right bottom, #424242, #6b6b6b);
    }
    
    .switch input:hover + .slider {
      box-shadow: 2px 2px var(--height) rgba(0,0,0,0.7) inset, -2px -2px var(--height) rgba(240,240,240,0.3) inset;
    }
    
    .switch input:checked + .slider:before {
      -webkit-transform: translateX(19px);
      -ms-transform: translateX(19px);
      transform: translateX(19px);
    }
    
    .slider.round {
       border-radius: 34px;
    }
    
    .slider.round:before {
      border-radius: 50%;
    }
    
    .vl {
      display: inline;
      border: 1px outset #3d3d3d;
      height: 23px;
      width: 0px;
    }
    
    .sliderlabel {
      margin: 5px;
      text-align: left;
    }
    
    .slidercontainer {
      display: flex;
      justify-content: left;
      margin: 5px;
      font-size:  15px;
    }
    
    .center-container-column {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    .hid {
      opacity: 0%;
      pointer-events: none;
    }
    
    .dialog {
      position: fixed;
      width: 100%;
      height: 100%;
      display: flex;
      align-content: center;
      justify-content: center;
      align-items: center;
      justify-items: center;
      background: rgba(0,0,0,0.4);
      backdrop-filter: blur(5px);
      transition: opacity .3s ease, background .3s ease;
      z-index: 100;
    }
    .flex-cont {
      display:flex;flex-direction:column;border-radius:10px;margin:10px 0;
    }
    .pad-5 {padding:10px;}
    .flex-cont-row{
      display:flex;flex-direction:row;padding:10px;
    }
    /*End PacifikyNeoDark*/
  </style>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
</head>

<body lang="en">
  <h1>Columnar Transposition Cipher</h1>
  <div id="controls">
  <button class="button" id='c-enc'>Encode</button>
  <button class="button" id='c-dec'>Decode</button>
  <br/>
  <input type='text' placeholder='Key' title='Key' id='c-key'></input>
  <input type='text' value='e' placeholder='Padder' title='Padder' id='c-padder'></input>
  <br/>
  <select id="c-wrapsel" title="Wrapping">
    <option value="nw">None</option>
    <option value="bw">Break</option>
    <option value="ww">Word</option>
    <option value="ab">Break All</option>
  </select>
  <hr/>
  <div class='flexhor'>
  <textarea placeholder='Plaintext' title='Plaintext' id='c-in' style="white-space: nowrap;"></textarea>
  <hr class='vd'/>
  <textarea placeholder='Ciphertext' title='Ciphertext' id='c-out' style="white-space: nowrap;"></textarea>
  </div>
  </div>
  <footer>Copyright 2025 Frost. CC-BY-SA-NC 4.0</footer>
  <script>
  	class fsort{
		static errorsuppress = false;
		static quickSort(arr,carr=null){
			carr || (carr = [...arr.keys()]);
			if(arr.length > 3){
				const oesval = fsort.errorsuppress;
				const harr = Math.trunc(arr.length/2);
				const earr = arr.length-1;
				const pivsort = fsort.tsort([arr[0],arr[harr],arr[earr]],[carr[0],carr[harr],carr[earr]]);
				arr[0] = pivsort[0][0];
				arr[earr] = pivsort[0][2];
				arr.splice(harr,1);
				arr.push(pivsort[0][1]);
				carr[0] = pivsort[1][0];
				carr[earr] = pivsort[1][2];
				carr.splice(harr,1);
				carr.push(pivsort[1][1]);
				let temp;
				let si = -1;
				for(let i=0;i<arr.length;i++){
					if(arr[i]<=arr[earr]){
						++si;
						if(i>si){
							temp = carr[i];
							carr[i] = carr[si];
							carr[si] = temp;
							temp = arr[i]
							arr[i] = arr[si];
							arr[si] = temp;
						}
					}
				}
				fsort.errorsuppress = true;
				temp = fsort.quickSort(arr.slice(0,si),carr.slice(0,si));
				arr.splice(0,si,...temp[0]);
				carr.splice(0,si,...temp[1]);
				fsort.errorsuppress = true;
				temp = fsort.quickSort(arr.slice(si+1),carr.slice(si+1));
				arr.splice(si+1,temp[0].length,...temp[0]);
				carr.splice(si+1,temp[1].length,...temp[1]);
				fsort.errorsuppress = oesval;
				return [arr,carr];
			}else if(arr.length === 3){
				return fsort.tsort(arr,carr);
			}else if(arr.length === 2){
				!fsort.errorsuppress && console.warn("fsort.quickSort : Attempting to sort a length 2 array.");
				return (arr[0] > arr[1] ? [arr.toReversed(),carr.toReversed()] : [arr,carr]);
			}else{
				!fsort.errorsuppress && console.warn("fsort.quickSort : Array length is 0 or 1 no sort needed."); //throw new RangeError();
				return [arr,carr];
			}
		}
		static tsort(arr,carr=null){
			const indices = new Uint8Array(3);
			if(arr[1] < arr[0]){
					if(arr[2] < arr[0]){
							if(arr[2] < arr[1]){
									indices[0] = 2;
									indices[1] = 1;
							}else{
									indices[0] = 1;
									indices[1] = 2;
							}
					}else{
							indices[0] = 1;
							indices[2] = 2;
					}
			}else if(arr[2] < arr[0]){
					indices[0] = 2;
					indices[2] = 1;
			}else if(arr[2] < arr[1]){
				indices[1] = 2;
				indices[2] = 1;
			}else{
				indices[1] = 1;
				indices[2] = 2;
			}
			return [[arr[indices[0]],arr[indices[1]],arr[indices[2]]],(carr ? [carr[indices[0]],carr[indices[1]],carr[indices[2]]] : indices)];
		}
	}
	fsort.errorsuppress = true;
	
  	//C-sys v1
  	const enc = document.getElementById('c-enc');
  	const dec = document.getElementById('c-dec');
  	const cinp = document.getElementById('c-in');
  	const cout = document.getElementById('c-out');
  	const keyinp = document.getElementById('c-key');
  	const padinp = document.getElementById('c-padder');
    const wrapsel = document.getElementById("c-wrapsel");
    function trig0f(e) {
      //try{
      
      const cols = keyinp.value.length;
      const korder = fsort.quickSort(Array.from(toNumArr(keyinp.value)))[1];
      console.log(korder);
      const rws = Math.ceil(cinp.value.length/cols);
      const columns = new Array(cols).fill().map(()=>(new Array(rws)).fill(padinp.value));
      for(let i=0;i<cinp.value.length;i++){
      	columns[i%cols][Math.floor(i/cols)] = cinp.value[i];
      }
      
      const out = new Array(cols);
      for(let i=0;i<cols;i++){
      	//console.log(columns[i]);
        out[i] = columns[korder[i]].join('');
      }
      cout.value = out.join('');
      
      //}catch(e){alert(e.stack)}
      return;
    }
    
    function trig1f(){
      //try{
      
      const cols = keyinp.value.length;
      if(cout.value.length % cols != 0){
        alert('Wrong column length!');
        return;
      }
      const korder = fsort.quickSort(Array.from(toNumArr(keyinp.value)))[1];
      console.log(korder);
      const rws = cout.value.length / cols; 
      const columns = new Array(cols).fill().map(()=>new Array(rws));
      for(let i=0;i<cout.value.length;i++){
        columns[korder[Math.floor(i/rws)]][i%rws] = cout.value[i];
      }
      
      let out=new Array(rws*cols);
      for(let j=0;j<rws;j++){
      	for(let i=0;i<cols;i++){
        	//if(j==0){console.log(columns[i])};
        	out[i+(j*cols)] = columns[i][j];
      	}
      }
      
      cinp.value = out.join('');
      
      //}catch(e){alert(e.stack)}
    }
    
    function toNumArr(s){
      const arr = new Uint8Array(s.length);
      for(let i=0;i<s.length;i++){
        arr[i] = s.charCodeAt(i);
      }
      return arr;
    }
    
    enc.addEventListener('click', trig0f);
    dec.addEventListener('click', trig1f);
    wrapsel.addEventListener("change",()=>{
      switch(wrapsel.value){
         case "ww":
           cinp.style="word-wrap:normal;";
           cout.style="word-wrap:normal;";
           break;
         case "bw":
           cinp.style="word-wrap:break-word;";
           cout.style="word-wrap:break-word;";
           break;
         case "ab":
           cinp.style="word-break: break-all;";
           cout.style="word-break: break-all;";
           break;
         default:
           cinp.style="white-space: nowrap;";
           cout.style="white-space: nowrap;";
           break;
         }
     });
  </script>
</body>
</html>
