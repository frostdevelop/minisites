<!DOCTYPE html>
<html>
<head>
  <title>Flappy</title>
  <style>
  	body {
  		margin:0;
  		padding:0;
  		display:flex;
  		align-items:center;
  		justify-content:center;
  		width: 100vw;
  		height:100vh;
  		background:black;
  	}
  	#flp-canv {
  		background:#0be4f4;
  	}
  </style>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
</head>
<body lang="en">
  <canvas id='flp-canv' width='800px' height='800px'></canvas>
  <script>
window.onbeforeunload = ()=>1;

class flapGame{
	constructor(c,d){
		this.c = c;
		this.d = d;
		this.ctx = this.c.getContext('2d');
		this.atx = new (window.AudioContext || window.webkitAudioContext)();
		this.r = 30;
		this.hs = 0;
		this.sc = 0;
		this.pw = 80;
		this.hpw = this.pw/2;
		this.dr = this.r*2;
		this.ph = this.dr*1.5;
		this.hw = this.c.width/2;
		this.hh = this.c.height/2;
		this.pbt = 20;
		this.hpbt = this.pbt/2;
		this.phw = 10;
		this.pwsbt = this.pw-this.pbt;
		this.v = 3;
		this.fly = false;
		this.flying = 0;
		this.flytime = 0;
		this.pipes = []; //[x,y,up/down bool]
		this.reset();
		this.gameLoop = this.gameLoop.bind(this);
		this.ctx.font = '30px Arial';
		this.c.addEventListener('click',()=>{
			if(!this.s){
				this.s = true;
				this.y = this.c.height/2;
				this.gameLoop();
			}else{
				//this.y = Math.max(this.y-60,this.r);
				this.g = -5.5;
			}
		});
		document.addEventListener('keydown',e=>{
			switch(e.code){
			case 'Space':
				if(!this.s){
					this.s = true;
					this.y = this.c.height/2;
					this.gameLoop();
				}else{
					//this.y = Math.max(this.y-60,this.r);
					/*
					if(g < 0){
					  this.g -= 5.5;
					}else{
					  this.g = -5.5;
					}
					*/
					this.g = -5.5;
				}
				break;
			case 'KeyD':
				this.d = !this.d;
				break;
			}
		});
		this.drawStart();
	}
	drawStart(d,s){
		this.ctx.clearRect(0,0,this.c.width,this.c.height);
		this.ctx.font = 'bold 100px cursive';
		if(d){
			this.ctx.fillStyle = 'red';
			const tm = this.ctx.measureText('You Died!');
			this.ctx.fillText('You Died!',this.hw-tm.width/2,this.hh-70);
		}else{
			this.ctx.fillStyle = 'yellow';
			const tm = this.ctx.measureText('Flappy Bird');
			this.ctx.fillText('Flappy Bird',this.hw-tm.width/2,this.hh-70);
		}
		this.drawBird();
		this.ctx.fillStyle = 'black';
		this.ctx.font = '50px Arial';
		const cstm = this.ctx.measureText('Press space/click');
		this.ctx.fillText('Press space/click',this.hw-cstm.width/2,this.hh+75);
		this.ctx.font = '30px Arial';
		const htxt = 'Highscore: ' + this.hs.toString();
		const htm = this.ctx.measureText(htxt);
		this.ctx.fillText(htxt,this.hw-htm.width/2,this.hh+120);
		if(d){
			const stxt = 'Score: ' + s.toString();
			const stm = this.ctx.measureText(stxt);
			this.ctx.fillText(stxt,this.hw-stm.width/2,this.hh+160);
		}
		this.ctx.font = '15px Arial';
		const ctxt = 'Â© Frost ' + (new Date).getFullYear().toString() + ' || CC-BY-NC-SA 4.0';
		const ctm = this.ctx.measureText(ctxt);
		this.ctx.fillText(ctxt,this.c.width-ctm.width-20,this.c.height-20);
		this.ctx.fillText('Press d for debug',20,this.c.height-20);
		this.ctx.font = '30px Arial';
	}
	gameLoop(){
		this.ctx.clearRect(0,0,this.c.width,this.c.height);
		this.drawBird();
		if(this.d){
			this.ctx.fillStyle = 'black';
			this.ctx.fillRect(this.hw,this.y,2,2);
			this.ctx.fillRect(0,this.y,this.dr,2);
			this.ctx.beginPath();
			this.ctx.moveTo(this.hw,this.y);
			this.ctx.lineTo(this.hw+this.v*10,this.y+this.g*10);
			this.ctx.stroke();
			this.ctx.closePath();
		}
		for(let i=this.pipes.length-1;i>=0;i--){
			const ox = this.pipes[i][0]-this.x;
			const x = ox+this.hw;
			if(x < -this.pw){
				this.pipes.splice(i,1);
			}else{
				const y = this.pipes[i][1]+this.ph;
				this.ctx.fillStyle = 'green';
				this.ctx.fillRect(x+this.hpbt,y,this.pwsbt,this.c.height-y);
				this.ctx.fillRect(x+this.hpbt,0,this.pwsbt,this.pipes[i][1]-this.ph);
				this.ctx.fillRect(x,y,this.pw,this.phw);
				this.ctx.fillRect(x,this.pipes[i][1]-this.ph,this.pw,this.phw);
				if(this.d){
					this.ctx.fillStyle = 'red';
					this.ctx.fillRect(x,this.pipes[i][1],this.pw,2);
					this.ctx.fillRect(ox+this.hpw,this.pipes[i][1],this.dr,2);
					this.ctx.fillStyle = 'blue';
					this.ctx.fillRect(x,this.pipes[i][1]-this.ph,2,this.ph*2);
				}
				if(Math.abs(ox+this.hpw)-this.r <= this.hpw && Math.abs(this.y-this.pipes[i][1])+this.r >= this.ph){
					this.reset();
					return;
				}
			}
		}
		this.ctx.fillStyle = 'black';
		if(this.d){
			this.ctx.fillText('X: '+this.x.toString(),20,80);
			this.ctx.fillText('Y: '+this.y.toString(),20,110);
			this.ctx.fillText('G: '+this.g.toString(),20,140);
		}
		this.ctx.fillText(this.sc,20,50);
		
		if(this.y >= this.c.height-this.r){
			this.reset();
		}else{
			this.y += this.g;
			this.g+=0.2;
			this.x += this.v;
			if(Math.floor(this.x / 500)+1 > this.sc){
				this.sc += 1;
				const beep = this.atx.createOscillator();
				beep.type = 'square';
				beep.frequency.value = 783;
				beep.connect(this.atx.destination);
				beep.start();
				this.addPipe();
				setTimeout(()=>{
					beep.stop();
				},300);
			}
			window.requestAnimationFrame(this.gameLoop);
		}
	}
	addPipe(){
		this.pipes.push([this.x+this.c.width/2,this.dr+Math.random()*(this.c.height-this.dr*2)]);
	}
	reset(){
		this.s = false;
		this.y = this.c.height/2;
		this.x = 0;
		this.pipes.length = 0;
		this.hs = Math.max(this.sc,this.hs);
		const os = this.sc;
		this.sc = 0;
		this.g = -5.5;
		this.drawStart(true,os);
	}
	drawBird(){
		this.ctx.fillStyle = 'yellow';
		this.ctx.beginPath();
		this.ctx.arc(this.hw,this.y,this.r,0,Math.PI*2);
		this.ctx.fill();
		this.ctx.closePath();
	}
}
const game = new flapGame(document.getElementById('flp-canv'),false);
  </script>
</body>
</html>
